//### Задания по Java: Введение и Основы

//1. **Введение в язык программирования Java:**
  // - Каковы основные характеристики языка программирования Java?
  //Платформенная независимость,Многозадачность,Автоматическое управление памятью,Безопасность,Разделение кода на пакеты
//2. **Почему стоит изучать язык программирования Java:**
 //  - Какие преимущества предоставляет Java, и почему ее стоит изучать?
 //Принцип "Write once, run anywhere" позволяет запускать программы на различных платформах.
 //Java поддерживает эффективное управление многозадачностью , что позволяет создавать ,большого объема проекты.
 //Java уделяет большое внимание безопасности и конфиденциальности.
 //Java является одним из используемых языков прогромирования,он входит как минимум в топ 4 самых востребованых.

//3. **История языка программирования Java:**
   //- Какие важные этапы в истории развития Java можно выделить?
   //Java была создана Джеймсом Гослингом и его небольшой группой в 1995 году. Изначально язык назывался "Oak", но затем был переименован в "Java".
// Название Java Джеймс Гослинг придумал попивая любимую чашку кофе,название кофе была Java.

//4. **Особенности языка программирования Java:**
   //- Что такое "байт-код" в контексте Java, и каково его значение для языка?
   //"bytecode" позволяет программам работать на различных платформах.

//5. **Шаги установки необходимых программ для Java:**
   //- Какие шаги нужно предпринять для установки Java Development Kit (JDK) и среды разработки (IDE)?
   //1. Установка Java JDK**: [Oracle](https://www.oracle.com/java/technologies/javase-downloads.html) или другие источники предоставляют Java Development Kit.
   //2. Установка Java IDE**: Установите среду разработки Java, такую как Eclipse, IntelliJ IDEA или NetBeans.
//6. **Шаги написания первой программы на Java:**
   //- Напишите программу "Hello World" на Java и объясните каждый шаг создания этой программы.
   ```java
   public class HelloWorld {
       public static void main(String[] args) {
           System.out.println("Привет, мир!");
       }
   }
   ```
   
//7. **Шаги компиляции кода на Java:**
   //- Какие этапы нужно пройти для компиляции Java-кода с использованием компилятора `javac`?
  // Напишите код в файл ( `HelloWorld.java`).
    //В терминале введите `javac HelloWorld.java`, чтобы скомпилировать код.
//8. **Шаги выполнения кода на Java:**
   //- Как можно выполнить скомпилированную Java-программу с использованием команды `java`?
   //В терминале введите `java HelloWorld`, чтобы запустить программу.

//9. **Способы вывода информации в консоль на Java:**
   //- Приведите примеры кода на Java для вывода информации в консоль различными способами.
```java
System.out.print("Вывести эту информацию в консоль");
System.out.println("Вывести эту информацию в консоль и перейти на новую строку");
```
//10. **Java (Garbage Collection) подробно:**
    //- Как работает сборщик мусора в Java, и почему это важно для управления памятью?
    //Сборка мусора в Java - это автоматический процесс, который удаляет неиспользуемые объекты, освобождая память.
//11. **Использование комментариев в Java:**
    //- Приведите примеры однострочных и многострочных комментариев в Java.
// Это однострочный комментарий

/* 
Это многострочный комментарий.
*/
//12. **Main метод в Java подробно:**
   // - Почему метод `main` является ключевым для выполнения Java-программы? Как он объявляется?
   //package Lesson1;

   //public class Main {
   
  // }
   //class Animal{
       
   //}
   //class Human{
       
  // }
   //потому что public class main может использоваться один раз.

//13. **Java (Command Line Arguments) подробно:**
    //- Как передавать аргументы командной строки в программу Java через метод `main`?
    //c помощью `String[] args` 
//14. **Java JDK, JRE и JVM подробно:**
    //- Какие функции выполняют JDK, JRE и JVM в Java?
    //JDK (Java Development Kit)**: Набор инструментов для написания и компиляции программ на Java.
    //JRE (Java Runtime Environment)**: Набор инструментов для выполнения программ на Java.
    //JVM (Java Virtual Machine)**: Виртуальная машина для выполнения скомпилированного кода Java на целевой платформе.
    
//15. **Платформы Java (Java SE, Java EE, Java ME) подробно:**
    //- В чем различия между Java SE, Java EE и Java ME?
    //Java SE (Standard Edition)**: Стандартная платформа Java с основным функционалом.
    //Java EE (Enterprise Edition)**: Расширенная платформа для организаций и корпоративных приложений.
    //Java ME (Micro Edition)**: Платформа для мобильных и других устройств с ограниченными ресурсами.
//16. **Classpath в Java подробно:**
    //- Что представляет собой Classpath в Java и как он используется для поиска классов?
    //Classpath - это система путей для нахождения классов, которые программа требует для выполнения.

//17. **Ввод информации в программу с использованием Scanner в Java:**
    //- Напишите программу на Java, использующую класс Scanner для ввода информации от пользователя.
    ```java
    import java.util.Scanner;
    
    public class InputExample {
        public static void main(String[] args) {
            Scanner scanner = new Scanner(System.in);
            System.out.print("Введите что-то: ");
            String userInput = scanner.nextLine();
            System.out.println("Вы ввели: " + userInput);
            scanner.close();
        }
    }
    ```
//18. **Ввод информации в программу с использованием JOptionPane в Java:**
   // - Создайте графический интерфейс с использованием JOptionPane для ввода информации в программу.
   ```java
import javax.swing.JOptionPane;

public class InputExampleJOptionPane {
    public static void main(String[] args) {
        String userInput = JOptionPane.showInputDialog("Введите что-то:");
        JOptionPane.showMessageDialog(null, "Вы ввели: " + userInput);
    }
}
```